services:
  # Servicio del manager
  manager:
    build:
      context: ./manager_node
      dockerfile: Dockerfile
    ports:
      - "8001:8000"

  mapek:
    build:
      context: .
      dockerfile: ./mapek/Dockerfile
    ports:
      - "8003:8003" # Puerto para la API de MAPE-K

  # Servicio de la Base de Datos (PostgreSQL)
  db:
    image: postgres:13
    environment:
      POSTGRES_USER: ${DB_USER} # De .env
      POSTGRES_PASSWORD: ${DB_PASSWORD} # De .env
      POSTGRES_DB: ${DB_NAME} # De .env
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydatabase"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Servicio del Trainer de la Cloud (para el modelo genérico)
  cloud_trainer:
    build:
      context: .
      dockerfile: ./cloud_node/Dockerfile
    environment:
      RETRAIN_INTERVAL_HOURS: ${RETRAIN_INTERVAL_HOURS} 
    volumes:
      - ./data/models:/app/data/models 
    command: python -m scripts.run_cloud_trainer_init_and_loop
    healthcheck:
      test: ["CMD-SHELL", "test -f /app/data/models/generic_activity_model.pkl"]
      interval: 10s
      timeout: 5s
      retries: 50
      start_period: 30s
    depends_on:
      db:
        condition: service_healthy

  # Servicio de cola de mensajes (RabbitMQ)
  rabbitmq:
    image: rabbitmq:3-management-alpine # Imagen con interfaz de gestión web
    ports:
      - "5672:5672"   # Puerto AMQP para clientes (Edge, Fog)
      - "15672:15672" # Puerto de la interfaz de gestión web (http://localhost:15672)
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  # Cloud API (Servidor de Modelos)
  cloud_api:
    build:
      context: .
      dockerfile: ./cloud_node/Dockerfile # Asume el mismo Dockerfile que cloud_trainer
    ports:
      - "${CLOUD_API_PORT}:${CLOUD_API_PORT}" 
    volumes:
      - ./data/models:/app/data/models  
    command: python -m cloud_node.api.main
    depends_on:
      cloud_trainer:
        condition: service_healthy

  data_ingestor:
    build:
      context: .
      dockerfile: ./data_ingestor/Dockerfile

  # Servicio del Nodo Edge
  edge_service:
    build:
      context: .
      dockerfile: ./edge_node/Dockerfile
    ports:
      - "8000:8000"
    

  # Servicio del Trainer del Fog
  fog_trainer:
    build:
      context: .
      dockerfile: ./fog_node/Dockerfile
    command: python fog_node/trainer.py
    environment:
      PYTHONPATH: /app


  fog_tester:
    build:
      context: .
      dockerfile: ./fog_node/Dockerfile
    command: python -m scripts_de_prueba.insert_sample_data


  # --- MONITOREO ---
  # Servicio de Prometheus
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - node-exporter
      - docker-exporter

  # Servicio de Grafana
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus

  # Exportador de métricas del nodo
  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    ports:
      - "9100:9100"
    pid: "host"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($|/)"'

  # Exportador de métricas de Docker
  # docker-exporter:
  #   image: prometheusnet/docker_exporter
  #   container_name: docker-exporter
  #   ports:
  #     - "9417:9417"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock

volumes:
  db_data: # Este es para los datos persistentes de la base de datos PostgreSQL
  grafana-storage: